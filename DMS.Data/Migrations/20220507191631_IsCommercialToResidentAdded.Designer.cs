// <auto-generated />
using System;
using DMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220507191631_IsCommercialToResidentAdded")]
    partial class IsCommercialToResidentAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("DMS.Models.EvictionOrder", b =>
                {
                    b.Property<int>("EvictionOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("EvictionOrderId"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.HasKey("EvictionOrderId");

                    b.HasIndex("ResidentId");

                    b.ToTable("eviction_order");

                    b.HasData(
                        new
                        {
                            EvictionOrderId = 1,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8482),
                            ResidentId = 11
                        },
                        new
                        {
                            EvictionOrderId = 2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8483),
                            ResidentId = 10
                        },
                        new
                        {
                            EvictionOrderId = 3,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8484),
                            ResidentId = 9
                        },
                        new
                        {
                            EvictionOrderId = 4,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8484),
                            ResidentId = 8
                        },
                        new
                        {
                            EvictionOrderId = 5,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8485),
                            ResidentId = 7
                        });
                });

            modelBuilder.Entity("DMS.Models.RatingChangeCategory", b =>
                {
                    b.Property<int>("RatingChangeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RatingChangeCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("RatingChangeCategoryId");

                    b.ToTable("rating_change_category");

                    b.HasData(
                        new
                        {
                            RatingChangeCategoryId = 1,
                            Name = "Докладная"
                        },
                        new
                        {
                            RatingChangeCategoryId = 2,
                            Name = "Поощрение"
                        },
                        new
                        {
                            RatingChangeCategoryId = 3,
                            Name = "Выговор"
                        });
                });

            modelBuilder.Entity("DMS.Models.RatingOperation", b =>
                {
                    b.Property<int>("RatingOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("operation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RatingOperationId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("ChangeValue")
                        .HasColumnType("integer")
                        .HasColumnName("change_value");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.HasKey("RatingOperationId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResidentId");

                    b.ToTable("rating_operation");

                    b.HasData(
                        new
                        {
                            RatingOperationId = 1,
                            CategoryId = 1,
                            ChangeValue = -3,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8503),
                            ResidentId = 1
                        },
                        new
                        {
                            RatingOperationId = 2,
                            CategoryId = 2,
                            ChangeValue = 2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8504),
                            ResidentId = 2
                        },
                        new
                        {
                            RatingOperationId = 3,
                            CategoryId = 3,
                            ChangeValue = -1,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8505),
                            ResidentId = 3
                        },
                        new
                        {
                            RatingOperationId = 4,
                            CategoryId = 1,
                            ChangeValue = -2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8506),
                            ResidentId = 4
                        },
                        new
                        {
                            RatingOperationId = 5,
                            CategoryId = 2,
                            ChangeValue = 2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8506),
                            ResidentId = 5
                        },
                        new
                        {
                            RatingOperationId = 6,
                            CategoryId = 2,
                            ChangeValue = 2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8507),
                            ResidentId = 6
                        });
                });

            modelBuilder.Entity("DMS.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ResidentId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsCommercial")
                        .HasColumnType("bool")
                        .HasColumnName("is_commercial");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PassportInformation")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("passport_information");

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("patronymic");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_number");

                    b.Property<string>("Tin")
                        .HasColumnType("varchar(12)")
                        .HasColumnName("tin");

                    b.HasKey("ResidentId");

                    b.HasIndex("PassportInformation")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.HasIndex("Tin")
                        .IsUnique();

                    b.ToTable("resident");

                    b.HasData(
                        new
                        {
                            ResidentId = 1,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8153),
                            FirstName = "Даниил",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Морозов",
                            Patronymic = "Артёмович",
                            RoomId = 301
                        },
                        new
                        {
                            ResidentId = 2,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8156),
                            FirstName = "Роман",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Васильев",
                            Patronymic = "Алексеевич",
                            RoomId = 423
                        },
                        new
                        {
                            ResidentId = 3,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8158),
                            FirstName = "Doma",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 301
                        },
                        new
                        {
                            ResidentId = 4,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8160),
                            FirstName = "Goma",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 301
                        },
                        new
                        {
                            ResidentId = 5,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8161),
                            FirstName = "Doma",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 302
                        },
                        new
                        {
                            ResidentId = 6,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8163),
                            FirstName = "Moma",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 303
                        },
                        new
                        {
                            ResidentId = 7,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8164),
                            FirstName = "Noma",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 304
                        },
                        new
                        {
                            ResidentId = 8,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8165),
                            FirstName = "Bulat",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 305
                        },
                        new
                        {
                            ResidentId = 9,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8167),
                            FirstName = "Bulad",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 306
                        },
                        new
                        {
                            ResidentId = 10,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8168),
                            FirstName = "Bular",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 307
                        },
                        new
                        {
                            ResidentId = 11,
                            BirthDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8169),
                            FirstName = "Bulas",
                            Gender = 'M',
                            IsCommercial = false,
                            LastName = "Vasilev",
                            Patronymic = "Артёмович",
                            RoomId = 407
                        });
                });

            modelBuilder.Entity("DMS.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("room_number");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("RoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("FloorNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("integer")
                        .HasColumnName("floor_number")
                        .HasComputedColumnSql("room_number / 100", true);

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.HasKey("RoomId");

                    b.ToTable("room");

                    b.HasData(
                        new
                        {
                            RoomId = 301,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 302,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 303,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 304,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 305,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 306,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 307,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 308,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 309,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 407,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        },
                        new
                        {
                            RoomId = 423,
                            Capacity = 3,
                            FloorNumber = 0,
                            Gender = 'M'
                        });
                });

            modelBuilder.Entity("DMS.Models.SettlementOrder", b =>
                {
                    b.Property<int>("SettlementOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SettlementOrderId"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("room_number");

                    b.HasKey("SettlementOrderId");

                    b.HasIndex("ResidentId");

                    b.HasIndex("RoomId");

                    b.ToTable("settlement_order");

                    b.HasData(
                        new
                        {
                            SettlementOrderId = 1,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8463),
                            ResidentId = 1,
                            RoomId = 301
                        },
                        new
                        {
                            SettlementOrderId = 2,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8464),
                            ResidentId = 2,
                            RoomId = 423
                        },
                        new
                        {
                            SettlementOrderId = 3,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8465),
                            ResidentId = 3,
                            RoomId = 301
                        },
                        new
                        {
                            SettlementOrderId = 4,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8466),
                            ResidentId = 4,
                            RoomId = 301
                        },
                        new
                        {
                            SettlementOrderId = 5,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8466),
                            ResidentId = 5,
                            RoomId = 302
                        },
                        new
                        {
                            SettlementOrderId = 6,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8467),
                            ResidentId = 6,
                            RoomId = 303
                        },
                        new
                        {
                            SettlementOrderId = 7,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8467),
                            ResidentId = 7,
                            RoomId = 304
                        },
                        new
                        {
                            SettlementOrderId = 8,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8468),
                            ResidentId = 8,
                            RoomId = 305
                        },
                        new
                        {
                            SettlementOrderId = 9,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8468),
                            ResidentId = 9,
                            RoomId = 306
                        },
                        new
                        {
                            SettlementOrderId = 10,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8469),
                            ResidentId = 10,
                            RoomId = 307
                        },
                        new
                        {
                            SettlementOrderId = 11,
                            OrderDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8470),
                            ResidentId = 11,
                            RoomId = 407
                        });
                });

            modelBuilder.Entity("DMS.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("operation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("operation_date");

                    b.Property<int>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision")
                        .HasColumnName("sum");

                    b.HasKey("TransactionId");

                    b.HasIndex("ResidentId");

                    b.ToTable("transaction");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8517),
                            ResidentId = 1,
                            Sum = 3000.0
                        },
                        new
                        {
                            TransactionId = 2,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8518),
                            ResidentId = 2,
                            Sum = 1000.0
                        },
                        new
                        {
                            TransactionId = 3,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8519),
                            ResidentId = 2,
                            Sum = 3000.0
                        },
                        new
                        {
                            TransactionId = 4,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8519),
                            ResidentId = 3,
                            Sum = 4000.0
                        },
                        new
                        {
                            TransactionId = 5,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8520),
                            ResidentId = 4,
                            Sum = 2012.4200000000001
                        },
                        new
                        {
                            TransactionId = 6,
                            OperationDate = new DateTime(2022, 5, 7, 19, 16, 30, 748, DateTimeKind.Utc).AddTicks(8520),
                            ResidentId = 5,
                            Sum = 18234.130000000001
                        });
                });

            modelBuilder.Entity("DMS.Models.EvictionOrder", b =>
                {
                    b.HasOne("DMS.Models.Resident", "Resident")
                        .WithMany("EvictionOrders")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("DMS.Models.RatingOperation", b =>
                {
                    b.HasOne("DMS.Models.RatingChangeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Models.Resident", "Resident")
                        .WithMany("RatingOperations")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("DMS.Models.Resident", b =>
                {
                    b.HasOne("DMS.Models.Room", "Room")
                        .WithMany("Residents")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DMS.Models.SettlementOrder", b =>
                {
                    b.HasOne("DMS.Models.Resident", "Resident")
                        .WithMany("SettlementOrders")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DMS.Models.Transaction", b =>
                {
                    b.HasOne("DMS.Models.Resident", "Resident")
                        .WithMany()
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("DMS.Models.Resident", b =>
                {
                    b.Navigation("EvictionOrders");

                    b.Navigation("RatingOperations");

                    b.Navigation("SettlementOrders");
                });

            modelBuilder.Entity("DMS.Models.Room", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
